// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.28.3
// source: validatex.proto

package validatex

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StringRules struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         bool                   `protobuf:"varint,1,opt,name=email,proto3" json:"email,omitempty"`
	MinLen        int32                  `protobuf:"varint,2,opt,name=min_len,json=minLen,proto3" json:"min_len,omitempty"`
	MaxLen        int32                  `protobuf:"varint,3,opt,name=max_len,json=maxLen,proto3" json:"max_len,omitempty"`
	ExactLen      int32                  `protobuf:"varint,4,opt,name=exact_len,json=exactLen,proto3" json:"exact_len,omitempty"`
	NonEmpty      bool                   `protobuf:"varint,5,opt,name=non_empty,json=nonEmpty,proto3" json:"non_empty,omitempty"`
	Uuid          bool                   `protobuf:"varint,6,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringRules) Reset() {
	*x = StringRules{}
	mi := &file_validatex_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringRules) ProtoMessage() {}

func (x *StringRules) ProtoReflect() protoreflect.Message {
	mi := &file_validatex_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringRules.ProtoReflect.Descriptor instead.
func (*StringRules) Descriptor() ([]byte, []int) {
	return file_validatex_proto_rawDescGZIP(), []int{0}
}

func (x *StringRules) GetEmail() bool {
	if x != nil {
		return x.Email
	}
	return false
}

func (x *StringRules) GetMinLen() int32 {
	if x != nil {
		return x.MinLen
	}
	return 0
}

func (x *StringRules) GetMaxLen() int32 {
	if x != nil {
		return x.MaxLen
	}
	return 0
}

func (x *StringRules) GetExactLen() int32 {
	if x != nil {
		return x.ExactLen
	}
	return 0
}

func (x *StringRules) GetNonEmpty() bool {
	if x != nil {
		return x.NonEmpty
	}
	return false
}

func (x *StringRules) GetUuid() bool {
	if x != nil {
		return x.Uuid
	}
	return false
}

type NumericRules struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Gt            float64                `protobuf:"fixed64,1,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte           float64                `protobuf:"fixed64,2,opt,name=gte,proto3" json:"gte,omitempty"`
	Lt            float64                `protobuf:"fixed64,3,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte           float64                `protobuf:"fixed64,4,opt,name=lte,proto3" json:"lte,omitempty"`
	Positive      bool                   `protobuf:"varint,5,opt,name=positive,proto3" json:"positive,omitempty"`
	Negative      bool                   `protobuf:"varint,6,opt,name=negative,proto3" json:"negative,omitempty"`
	EqualTo       float64                `protobuf:"fixed64,7,opt,name=equal_to,json=equalTo,proto3" json:"equal_to,omitempty"`
	NonZero       bool                   `protobuf:"varint,8,opt,name=non_zero,json=nonZero,proto3" json:"non_zero,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NumericRules) Reset() {
	*x = NumericRules{}
	mi := &file_validatex_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumericRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericRules) ProtoMessage() {}

func (x *NumericRules) ProtoReflect() protoreflect.Message {
	mi := &file_validatex_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericRules.ProtoReflect.Descriptor instead.
func (*NumericRules) Descriptor() ([]byte, []int) {
	return file_validatex_proto_rawDescGZIP(), []int{1}
}

func (x *NumericRules) GetGt() float64 {
	if x != nil {
		return x.Gt
	}
	return 0
}

func (x *NumericRules) GetGte() float64 {
	if x != nil {
		return x.Gte
	}
	return 0
}

func (x *NumericRules) GetLt() float64 {
	if x != nil {
		return x.Lt
	}
	return 0
}

func (x *NumericRules) GetLte() float64 {
	if x != nil {
		return x.Lte
	}
	return 0
}

func (x *NumericRules) GetPositive() bool {
	if x != nil {
		return x.Positive
	}
	return false
}

func (x *NumericRules) GetNegative() bool {
	if x != nil {
		return x.Negative
	}
	return false
}

func (x *NumericRules) GetEqualTo() float64 {
	if x != nil {
		return x.EqualTo
	}
	return 0
}

func (x *NumericRules) GetNonZero() bool {
	if x != nil {
		return x.NonZero
	}
	return false
}

type TimestampRules struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MinTime        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
	MaxTime        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	RequiredNow    bool                   `protobuf:"varint,3,opt,name=required_now,json=requiredNow,proto3" json:"required_now,omitempty"`
	RequiredPast   bool                   `protobuf:"varint,4,opt,name=required_past,json=requiredPast,proto3" json:"required_past,omitempty"`
	RequiredFuture bool                   `protobuf:"varint,5,opt,name=required_future,json=requiredFuture,proto3" json:"required_future,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TimestampRules) Reset() {
	*x = TimestampRules{}
	mi := &file_validatex_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampRules) ProtoMessage() {}

func (x *TimestampRules) ProtoReflect() protoreflect.Message {
	mi := &file_validatex_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampRules.ProtoReflect.Descriptor instead.
func (*TimestampRules) Descriptor() ([]byte, []int) {
	return file_validatex_proto_rawDescGZIP(), []int{2}
}

func (x *TimestampRules) GetMinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MinTime
	}
	return nil
}

func (x *TimestampRules) GetMaxTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

func (x *TimestampRules) GetRequiredNow() bool {
	if x != nil {
		return x.RequiredNow
	}
	return false
}

func (x *TimestampRules) GetRequiredPast() bool {
	if x != nil {
		return x.RequiredPast
	}
	return false
}

func (x *TimestampRules) GetRequiredFuture() bool {
	if x != nil {
		return x.RequiredFuture
	}
	return false
}

type RepeatedRules struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinItems      uint32                 `protobuf:"varint,1,opt,name=min_items,json=minItems,proto3" json:"min_items,omitempty"`
	MaxItems      uint32                 `protobuf:"varint,2,opt,name=max_items,json=maxItems,proto3" json:"max_items,omitempty"`
	ExactItems    uint32                 `protobuf:"varint,3,opt,name=exact_items,json=exactItems,proto3" json:"exact_items,omitempty"`
	Unique        bool                   `protobuf:"varint,4,opt,name=unique,proto3" json:"unique,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedRules) Reset() {
	*x = RepeatedRules{}
	mi := &file_validatex_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedRules) ProtoMessage() {}

func (x *RepeatedRules) ProtoReflect() protoreflect.Message {
	mi := &file_validatex_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedRules.ProtoReflect.Descriptor instead.
func (*RepeatedRules) Descriptor() ([]byte, []int) {
	return file_validatex_proto_rawDescGZIP(), []int{3}
}

func (x *RepeatedRules) GetMinItems() uint32 {
	if x != nil {
		return x.MinItems
	}
	return 0
}

func (x *RepeatedRules) GetMaxItems() uint32 {
	if x != nil {
		return x.MaxItems
	}
	return 0
}

func (x *RepeatedRules) GetExactItems() uint32 {
	if x != nil {
		return x.ExactItems
	}
	return 0
}

func (x *RepeatedRules) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

type BoolRules struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Required      bool                   `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoolRules) Reset() {
	*x = BoolRules{}
	mi := &file_validatex_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolRules) ProtoMessage() {}

func (x *BoolRules) ProtoReflect() protoreflect.Message {
	mi := &file_validatex_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolRules.ProtoReflect.Descriptor instead.
func (*BoolRules) Descriptor() ([]byte, []int) {
	return file_validatex_proto_rawDescGZIP(), []int{4}
}

func (x *BoolRules) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type FieldRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*FieldRules_String_
	//	*FieldRules_Numeric
	//	*FieldRules_Timestamp
	//	*FieldRules_Repeated
	//	*FieldRules_Bool
	Type          isFieldRules_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldRules) Reset() {
	*x = FieldRules{}
	mi := &file_validatex_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRules) ProtoMessage() {}

func (x *FieldRules) ProtoReflect() protoreflect.Message {
	mi := &file_validatex_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRules.ProtoReflect.Descriptor instead.
func (*FieldRules) Descriptor() ([]byte, []int) {
	return file_validatex_proto_rawDescGZIP(), []int{5}
}

func (x *FieldRules) GetType() isFieldRules_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FieldRules) GetString_() *StringRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_String_); ok {
			return x.String_
		}
	}
	return nil
}

func (x *FieldRules) GetNumeric() *NumericRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Numeric); ok {
			return x.Numeric
		}
	}
	return nil
}

func (x *FieldRules) GetTimestamp() *TimestampRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Timestamp); ok {
			return x.Timestamp
		}
	}
	return nil
}

func (x *FieldRules) GetRepeated() *RepeatedRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Repeated); ok {
			return x.Repeated
		}
	}
	return nil
}

func (x *FieldRules) GetBool() *BoolRules {
	if x != nil {
		if x, ok := x.Type.(*FieldRules_Bool); ok {
			return x.Bool
		}
	}
	return nil
}

type isFieldRules_Type interface {
	isFieldRules_Type()
}

type FieldRules_String_ struct {
	String_ *StringRules `protobuf:"bytes,1,opt,name=string,proto3,oneof"`
}

type FieldRules_Numeric struct {
	Numeric *NumericRules `protobuf:"bytes,2,opt,name=numeric,proto3,oneof"`
}

type FieldRules_Timestamp struct {
	Timestamp *TimestampRules `protobuf:"bytes,3,opt,name=timestamp,proto3,oneof"`
}

type FieldRules_Repeated struct {
	Repeated *RepeatedRules `protobuf:"bytes,4,opt,name=repeated,proto3,oneof"`
}

type FieldRules_Bool struct {
	Bool *BoolRules `protobuf:"bytes,5,opt,name=bool,proto3,oneof"`
}

func (*FieldRules_String_) isFieldRules_Type() {}

func (*FieldRules_Numeric) isFieldRules_Type() {}

func (*FieldRules_Timestamp) isFieldRules_Type() {}

func (*FieldRules_Repeated) isFieldRules_Type() {}

func (*FieldRules_Bool) isFieldRules_Type() {}

var file_validatex_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldRules)(nil),
		Field:         70000,
		Name:          "validatex.rules",
		Tag:           "bytes,70000,opt,name=rules",
		Filename:      "validatex.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional validatex.FieldRules rules = 70000;
	E_Rules = &file_validatex_proto_extTypes[0]
)

var File_validatex_proto protoreflect.FileDescriptor

var file_validatex_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x78, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa3, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x63, 0x74,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x61, 0x63,
	0x74, 0x4c, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x67, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x54, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x6f, 0x6e, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6e, 0x6f, 0x6e, 0x5a, 0x65, 0x72, 0x6f, 0x22, 0xef, 0x01, 0x0a, 0x0e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x77, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x61, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x61,
	0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x22,
	0x27, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x0a, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x78, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x07, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x78, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x39,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x78, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x78, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x4c, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf0, 0xa2,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x78, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x78, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x78, 0x3b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_validatex_proto_rawDescOnce sync.Once
	file_validatex_proto_rawDescData = file_validatex_proto_rawDesc
)

func file_validatex_proto_rawDescGZIP() []byte {
	file_validatex_proto_rawDescOnce.Do(func() {
		file_validatex_proto_rawDescData = protoimpl.X.CompressGZIP(file_validatex_proto_rawDescData)
	})
	return file_validatex_proto_rawDescData
}

var file_validatex_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_validatex_proto_goTypes = []any{
	(*StringRules)(nil),               // 0: validatex.StringRules
	(*NumericRules)(nil),              // 1: validatex.NumericRules
	(*TimestampRules)(nil),            // 2: validatex.TimestampRules
	(*RepeatedRules)(nil),             // 3: validatex.RepeatedRules
	(*BoolRules)(nil),                 // 4: validatex.BoolRules
	(*FieldRules)(nil),                // 5: validatex.FieldRules
	(*timestamppb.Timestamp)(nil),     // 6: google.protobuf.Timestamp
	(*descriptorpb.FieldOptions)(nil), // 7: google.protobuf.FieldOptions
}
var file_validatex_proto_depIdxs = []int32{
	6, // 0: validatex.TimestampRules.min_time:type_name -> google.protobuf.Timestamp
	6, // 1: validatex.TimestampRules.max_time:type_name -> google.protobuf.Timestamp
	0, // 2: validatex.FieldRules.string:type_name -> validatex.StringRules
	1, // 3: validatex.FieldRules.numeric:type_name -> validatex.NumericRules
	2, // 4: validatex.FieldRules.timestamp:type_name -> validatex.TimestampRules
	3, // 5: validatex.FieldRules.repeated:type_name -> validatex.RepeatedRules
	4, // 6: validatex.FieldRules.bool:type_name -> validatex.BoolRules
	7, // 7: validatex.rules:extendee -> google.protobuf.FieldOptions
	5, // 8: validatex.rules:type_name -> validatex.FieldRules
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	8, // [8:9] is the sub-list for extension type_name
	7, // [7:8] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_validatex_proto_init() }
func file_validatex_proto_init() {
	if File_validatex_proto != nil {
		return
	}
	file_validatex_proto_msgTypes[5].OneofWrappers = []any{
		(*FieldRules_String_)(nil),
		(*FieldRules_Numeric)(nil),
		(*FieldRules_Timestamp)(nil),
		(*FieldRules_Repeated)(nil),
		(*FieldRules_Bool)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_validatex_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_validatex_proto_goTypes,
		DependencyIndexes: file_validatex_proto_depIdxs,
		MessageInfos:      file_validatex_proto_msgTypes,
		ExtensionInfos:    file_validatex_proto_extTypes,
	}.Build()
	File_validatex_proto = out.File
	file_validatex_proto_rawDesc = nil
	file_validatex_proto_goTypes = nil
	file_validatex_proto_depIdxs = nil
}
